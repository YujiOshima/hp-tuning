// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/hp-tuning/api (interfaces: ManagerClient)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/kubeflow/hp-tuning/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockManagerClient is a mock of ManagerClient interface
type MockManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagerClientMockRecorder
}

// MockManagerClientMockRecorder is the mock recorder for MockManagerClient
type MockManagerClientMockRecorder struct {
	mock *MockManagerClient
}

// NewMockManagerClient creates a new mock instance
func NewMockManagerClient(ctrl *gomock.Controller) *MockManagerClient {
	mock := &MockManagerClient{ctrl: ctrl}
	mock.recorder = &MockManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagerClient) EXPECT() *MockManagerClientMockRecorder {
	return m.recorder
}

// AddMeasurementToTrials mocks base method
func (m *MockManagerClient) AddMeasurementToTrials(arg0 context.Context, arg1 *api.AddMeasurementToTrialsRequest, arg2 ...grpc.CallOption) (*api.AddMeasurementToTrialsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMeasurementToTrials", varargs...)
	ret0, _ := ret[0].(*api.AddMeasurementToTrialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMeasurementToTrials indicates an expected call of AddMeasurementToTrials
func (mr *MockManagerClientMockRecorder) AddMeasurementToTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMeasurementToTrials", reflect.TypeOf((*MockManagerClient)(nil).AddMeasurementToTrials), varargs...)
}

// CompleteTrial mocks base method
func (m *MockManagerClient) CompleteTrial(arg0 context.Context, arg1 *api.CompleteTrialRequest, arg2 ...grpc.CallOption) (*api.CompleteTrialReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTrial", varargs...)
	ret0, _ := ret[0].(*api.CompleteTrialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTrial indicates an expected call of CompleteTrial
func (mr *MockManagerClientMockRecorder) CompleteTrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTrial", reflect.TypeOf((*MockManagerClient)(nil).CompleteTrial), varargs...)
}

// CreateStudy mocks base method
func (m *MockManagerClient) CreateStudy(arg0 context.Context, arg1 *api.CreateStudyRequest, arg2 ...grpc.CallOption) (*api.CreateStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStudy", varargs...)
	ret0, _ := ret[0].(*api.CreateStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudy indicates an expected call of CreateStudy
func (mr *MockManagerClientMockRecorder) CreateStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudy", reflect.TypeOf((*MockManagerClient)(nil).CreateStudy), varargs...)
}

// GetObjectValue mocks base method
func (m *MockManagerClient) GetObjectValue(arg0 context.Context, arg1 *api.GetObjectValueRequest, arg2 ...grpc.CallOption) (*api.GetObjectValueReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectValue", varargs...)
	ret0, _ := ret[0].(*api.GetObjectValueReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectValue indicates an expected call of GetObjectValue
func (mr *MockManagerClientMockRecorder) GetObjectValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectValue", reflect.TypeOf((*MockManagerClient)(nil).GetObjectValue), varargs...)
}

// GetStudys mocks base method
func (m *MockManagerClient) GetStudys(arg0 context.Context, arg1 *api.GetStudysRequest, arg2 ...grpc.CallOption) (*api.GetStudysReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudys", varargs...)
	ret0, _ := ret[0].(*api.GetStudysReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudys indicates an expected call of GetStudys
func (mr *MockManagerClientMockRecorder) GetStudys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudys", reflect.TypeOf((*MockManagerClient)(nil).GetStudys), varargs...)
}

// InitializeSuggestService mocks base method
func (m *MockManagerClient) InitializeSuggestService(arg0 context.Context, arg1 *api.InitializeSuggestServiceRequest, arg2 ...grpc.CallOption) (*api.InitializeSuggestServiceReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeSuggestService", varargs...)
	ret0, _ := ret[0].(*api.InitializeSuggestServiceReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeSuggestService indicates an expected call of InitializeSuggestService
func (mr *MockManagerClientMockRecorder) InitializeSuggestService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSuggestService", reflect.TypeOf((*MockManagerClient)(nil).InitializeSuggestService), varargs...)
}

// ShouldTrialStop mocks base method
func (m *MockManagerClient) ShouldTrialStop(arg0 context.Context, arg1 *api.ShouldTrialStopRequest, arg2 ...grpc.CallOption) (*api.ShouldTrialStopReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShouldTrialStop", varargs...)
	ret0, _ := ret[0].(*api.ShouldTrialStopReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldTrialStop indicates an expected call of ShouldTrialStop
func (mr *MockManagerClientMockRecorder) ShouldTrialStop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldTrialStop", reflect.TypeOf((*MockManagerClient)(nil).ShouldTrialStop), varargs...)
}

// StopStudy mocks base method
func (m *MockManagerClient) StopStudy(arg0 context.Context, arg1 *api.StopStudyRequest, arg2 ...grpc.CallOption) (*api.StopStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopStudy", varargs...)
	ret0, _ := ret[0].(*api.StopStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStudy indicates an expected call of StopStudy
func (mr *MockManagerClientMockRecorder) StopStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStudy", reflect.TypeOf((*MockManagerClient)(nil).StopStudy), varargs...)
}

// SuggestTrials mocks base method
func (m *MockManagerClient) SuggestTrials(arg0 context.Context, arg1 *api.SuggestTrialsRequest, arg2 ...grpc.CallOption) (*api.SuggestTrialsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuggestTrials", varargs...)
	ret0, _ := ret[0].(*api.SuggestTrialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestTrials indicates an expected call of SuggestTrials
func (mr *MockManagerClientMockRecorder) SuggestTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestTrials", reflect.TypeOf((*MockManagerClient)(nil).SuggestTrials), varargs...)
}
