/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeflow/katib/pkg/apis/studycontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StudyControllerLister helps list StudyControllers.
type StudyControllerLister interface {
	// List lists all StudyControllers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StudyController, err error)
	// StudyControllers returns an object that can list and get StudyControllers.
	StudyControllers(namespace string) StudyControllerNamespaceLister
	StudyControllerListerExpansion
}

// studyControllerLister implements the StudyControllerLister interface.
type studyControllerLister struct {
	indexer cache.Indexer
}

// NewStudyControllerLister returns a new StudyControllerLister.
func NewStudyControllerLister(indexer cache.Indexer) StudyControllerLister {
	return &studyControllerLister{indexer: indexer}
}

// List lists all StudyControllers in the indexer.
func (s *studyControllerLister) List(selector labels.Selector) (ret []*v1alpha1.StudyController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StudyController))
	})
	return ret, err
}

// StudyControllers returns an object that can list and get StudyControllers.
func (s *studyControllerLister) StudyControllers(namespace string) StudyControllerNamespaceLister {
	return studyControllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StudyControllerNamespaceLister helps list and get StudyControllers.
type StudyControllerNamespaceLister interface {
	// List lists all StudyControllers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StudyController, err error)
	// Get retrieves the StudyController from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StudyController, error)
	StudyControllerNamespaceListerExpansion
}

// studyControllerNamespaceLister implements the StudyControllerNamespaceLister
// interface.
type studyControllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StudyControllers in the indexer for a given namespace.
func (s studyControllerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StudyController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StudyController))
	})
	return ret, err
}

// Get retrieves the StudyController from the indexer for a given namespace and name.
func (s studyControllerNamespaceLister) Get(name string) (*v1alpha1.StudyController, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("studycontroller"), name)
	}
	return obj.(*v1alpha1.StudyController), nil
}
