{
  "swagger": "2.0",
  "info": {
    "title": "api.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/Manager/DeleteExperiment/{experiment_name}": {
      "get": {
        "summary": "* \nDelete a Experiment from DB by name.",
        "operationId": "DeleteExperiment",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2DeleteExperimentReply"
            }
          }
        },
        "parameters": [
          {
            "name": "experiment_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/GetExperiment/{experiment_name}": {
      "get": {
        "summary": "* \nGet a Experiment from DB by name.",
        "operationId": "GetExperiment",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2GetExperimentReply"
            }
          }
        },
        "parameters": [
          {
            "name": "experiment_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/GetExperimentList": {
      "get": {
        "summary": "*\nGet a summary list of Experiment from DB.\nThe summary includes name and condition.",
        "operationId": "GetExperimentList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2GetExperimentListReply"
            }
          }
        },
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/GetObservationLog/{trial_id}": {
      "get": {
        "summary": "*\nGet all log of Observations for a Trial.",
        "operationId": "GetObservationLog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2GetObservationLogReply"
            }
          }
        },
        "parameters": [
          {
            "name": "trial_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/GetSuggestions": {
      "post": {
        "summary": "* \nGet Suggestions from a Suggestion service.",
        "operationId": "GetSuggestions",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2GetSuggestionsReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2GetSuggestionsRequest"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/GetTrial/{trial_id}": {
      "get": {
        "summary": "*\nGet a Trial from DB by ID of Trial.",
        "operationId": "GetTrial",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2GetTrialReply"
            }
          }
        },
        "parameters": [
          {
            "name": "trial_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/GetTrialList/{experiment_name}": {
      "get": {
        "summary": "* \nGet a list of Trial from DB by name of a Experiment.",
        "operationId": "GetTrialList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2GetTrialListReply"
            }
          }
        },
        "parameters": [
          {
            "name": "experiment_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/RegisterExperiment": {
      "post": {
        "summary": "*\nRegister a Experiment to DB.",
        "operationId": "RegisterExperiment",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2RegisterExperimentReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2Experiment"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/RegisterTrial": {
      "post": {
        "summary": "*\nRegister a Trial to DB.\nID will be filled by manager automatically.",
        "operationId": "RegisterTrial",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2RegisterTrialReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2Trial"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/ReportObservationLog": {
      "post": {
        "summary": "* \nReport a log of Observations for a Trial.\nThe log consists of timestamp and value of metric.",
        "operationId": "ReportObservationLog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2ReportObservationLogReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2ReportObservationLogRequest"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/UpdateExperimentStatus": {
      "put": {
        "summary": "* \nUpdate Status of a experiment.",
        "operationId": "UpdateExperimentStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2UpdateExperimentStatusReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2UpdateExperimentStatusRequest"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/UpdateTrialStatus": {
      "put": {
        "summary": "* \nUpdate Status of a trial.",
        "operationId": "UpdateTrialStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2UpdateTrialStatusReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2UpdateTrialStatusRequest"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    },
    "/api/Manager/ValidateAlgorithmSettings": {
      "post": {
        "summary": "* \nValidate AlgorithmSettings in an Experiment.\nSuggestion service should return INVALID_ARGUMENT Error when the parameter is invalid",
        "operationId": "ValidateAlgorithmSettings",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alpha2ValidateAlgorithmSettingsReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alpha2ValidateAlgorithmSettingsRequest"
            }
          }
        ],
        "tags": [
          "Manager"
        ]
      }
    }
  },
  "definitions": {
    "ExperimentStatusExperimentConditionType": {
      "type": "string",
      "enum": [
        "CREATED",
        "RUNNING",
        "RESTARTING",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "CREATED"
    },
    "MetricLogValueLog": {
      "type": "object",
      "properties": {
        "reported_time": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "TrialStatusTrialConditionType": {
      "type": "string",
      "enum": [
        "PENDING",
        "RUNNING",
        "COMPLETED",
        "KILLED",
        "FAILED"
      ],
      "default": "PENDING"
    },
    "alpha2AlgorithmSetting": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "alpha2AlgorithmSpec": {
      "type": "object",
      "properties": {
        "algorithm_name": {
          "type": "string"
        },
        "algorithm_setting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2AlgorithmSetting"
          }
        },
        "early_stopping_spec": {
          "$ref": "#/definitions/alpha2EarlyStoppingSpec"
        }
      }
    },
    "alpha2DeleteExperimentReply": {
      "type": "object",
      "properties": {
        "experiment_name": {
          "type": "string"
        }
      }
    },
    "alpha2EarlyStoppingSpec": {
      "type": "object"
    },
    "alpha2Experiment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "experiment_spec": {
          "$ref": "#/definitions/alpha2ExperimentSpec"
        },
        "experiment_status": {
          "$ref": "#/definitions/alpha2ExperimentStatus"
        }
      }
    },
    "alpha2ExperimentSpec": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2ParameterSpec"
          }
        },
        "objective": {
          "$ref": "#/definitions/alpha2ObjectiveSpec"
        },
        "algorithm": {
          "$ref": "#/definitions/alpha2AlgorithmSpec"
        },
        "trial_template": {
          "type": "string"
        },
        "pallarel_trial_count": {
          "type": "integer",
          "format": "int32"
        },
        "max_trial_count": {
          "type": "integer",
          "format": "int32"
        },
        "metrics_collector_type": {
          "type": "string"
        }
      },
      "description": "*\nSpec of a Experiment. Experiment represents a single optimization run over a feasible space. \nEach Experiment contains a configuration describing the feasible space, as well as a set of Trials.\nIt is assumed that objective function f(x) does not change in the course of a Experiment."
    },
    "alpha2ExperimentStatus": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string"
        },
        "completion_time": {
          "type": "string"
        },
        "last_reconcile_time": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/ExperimentStatusExperimentConditionType"
        }
      }
    },
    "alpha2ExperimentSummary": {
      "type": "object",
      "properties": {
        "experiment_name": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/ExperimentStatusExperimentConditionType"
        }
      }
    },
    "alpha2FeasibleSpace": {
      "type": "object",
      "properties": {
        "max": {
          "type": "string"
        },
        "min": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "step": {
          "type": "string"
        }
      },
      "description": "*\nFeasible space for optimization.\nInt and Double type use Max/Min.\nDiscrete and Categorical type use List."
    },
    "alpha2GetExperimentListReply": {
      "type": "object",
      "properties": {
        "experiment_summarys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2ExperimentSummary"
          }
        }
      }
    },
    "alpha2GetExperimentReply": {
      "type": "object",
      "properties": {
        "experiment": {
          "$ref": "#/definitions/alpha2Experiment"
        }
      }
    },
    "alpha2GetObservationLogReply": {
      "type": "object",
      "properties": {
        "observation_log": {
          "$ref": "#/definitions/alpha2ObservationLog"
        }
      }
    },
    "alpha2GetSuggestionsReply": {
      "type": "object",
      "properties": {
        "trials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2Trial"
          }
        }
      }
    },
    "alpha2GetSuggestionsRequest": {
      "type": "object",
      "properties": {
        "experiment_name": {
          "type": "string"
        },
        "algorithm_name": {
          "type": "string"
        },
        "request_number": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "alpha2GetTrialListReply": {
      "type": "object",
      "properties": {
        "trials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2Trial"
          }
        }
      }
    },
    "alpha2GetTrialReply": {
      "type": "object",
      "properties": {
        "trial": {
          "$ref": "#/definitions/alpha2Trial"
        }
      }
    },
    "alpha2Metric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "alpha2MetricLog": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "valuelog": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricLogValueLog"
          }
        }
      }
    },
    "alpha2ObjectiveSpec": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/alpha2ObjectiveType"
        },
        "goal": {
          "type": "number",
          "format": "float"
        },
        "objective_metric_name": {
          "type": "string"
        },
        "additional_metrics_name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "alpha2ObjectiveType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "MINIMIZE",
        "MAXIMIZE"
      ],
      "default": "UNKNOWN",
      "description": "*\nDirection of optimization. Minimize or Maximize."
    },
    "alpha2Observation": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2Metric"
          }
        }
      }
    },
    "alpha2ObservationLog": {
      "type": "object",
      "properties": {
        "metriclogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2MetricLog"
          }
        }
      }
    },
    "alpha2ParameterAssignment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "alpha2ParameterSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameter_type": {
          "$ref": "#/definitions/alpha2ParameterType"
        },
        "feasible_space": {
          "$ref": "#/definitions/alpha2FeasibleSpace"
        }
      },
      "description": "*\nConfig for a Hyper parameter.\nKatib will create each Hyper parameter from this config."
    },
    "alpha2ParameterType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "DOUBLE",
        "INT",
        "DISCRETE",
        "CATEGORICAL"
      ],
      "default": "UNKNOWN_TYPE",
      "description": "*\nTypes of value for HyperParameter."
    },
    "alpha2RegisterExperimentReply": {
      "type": "object"
    },
    "alpha2RegisterTrialReply": {
      "type": "object",
      "properties": {
        "trial_id": {
          "type": "string"
        }
      }
    },
    "alpha2ReportObservationLogReply": {
      "type": "object"
    },
    "alpha2ReportObservationLogRequest": {
      "type": "object",
      "properties": {
        "trial_id": {
          "type": "string"
        },
        "observation_log": {
          "$ref": "#/definitions/alpha2ObservationLog"
        }
      }
    },
    "alpha2Trial": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/alpha2TrialSpec"
        },
        "status": {
          "$ref": "#/definitions/alpha2TrialStatus"
        }
      }
    },
    "alpha2TrialSpec": {
      "type": "object",
      "properties": {
        "experiment_name": {
          "type": "string"
        },
        "parameter_assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alpha2ParameterAssignment"
          }
        },
        "run_spec": {
          "type": "string"
        }
      }
    },
    "alpha2TrialStatus": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string"
        },
        "completion_time": {
          "type": "string"
        },
        "last_reconcile_time": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/TrialStatusTrialConditionType"
        },
        "observation": {
          "$ref": "#/definitions/alpha2Observation"
        }
      }
    },
    "alpha2UpdateExperimentStatusReply": {
      "type": "object",
      "properties": {
        "experiment_name": {
          "type": "string"
        }
      }
    },
    "alpha2UpdateExperimentStatusRequest": {
      "type": "object",
      "properties": {
        "experiment_name": {
          "type": "string"
        },
        "new_status": {
          "$ref": "#/definitions/alpha2ExperimentStatus"
        }
      }
    },
    "alpha2UpdateTrialStatusReply": {
      "type": "object",
      "properties": {
        "trial_id": {
          "type": "string"
        }
      }
    },
    "alpha2UpdateTrialStatusRequest": {
      "type": "object",
      "properties": {
        "trial_id": {
          "type": "string"
        },
        "new_status": {
          "$ref": "#/definitions/alpha2TrialStatus"
        }
      }
    },
    "alpha2ValidateAlgorithmSettingsReply": {
      "type": "object",
      "title": "*\nReturn INVALID_ARGUMENT Error if Algorithm Settings are not Valid"
    },
    "alpha2ValidateAlgorithmSettingsRequest": {
      "type": "object",
      "properties": {
        "experiment_spec": {
          "$ref": "#/definitions/alpha2ExperimentSpec"
        },
        "algorithm_name": {
          "type": "string"
        }
      }
    }
  }
}
